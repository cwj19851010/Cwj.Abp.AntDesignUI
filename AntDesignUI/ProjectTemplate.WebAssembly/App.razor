@using Cwj.Abp.AntDesignTheme.Routing
@using Cwj.Abp.IdentityManagement.AntDesignUI
@using Cwj.Abp.SettingManagement.AntDesignUI
@using Cwj.Abp.TenantManagement.AntDesignUI
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using System.Reflection
@using ProjectTemplate.WebAssembly.Layouts

<CascadingAuthenticationState>
  <Router AppAssembly="@assembly" AdditionalAssemblies="@assemblies">
    <Found Context="routeData">
             <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" >
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

@code{

    [Inject] protected IOptions<AbpRouterOptions> RouterOptions { get; set; }
    private Assembly assembly = typeof(Program).Assembly;
    private Assembly[] assemblies = new Assembly[] { };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {

        }
        
        //StateHasChanged();
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override bool ShouldRender()
    {
        return base.ShouldRender();
    }

    protected override Task OnInitializedAsync()
    {
        
        assemblies = RouterOptions.Value.AdditionalAssemblies.ToArray();
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        return base.SetParametersAsync(parameters);
    }
}